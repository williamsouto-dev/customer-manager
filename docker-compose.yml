version: '3.1'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    expose:
      - "2181"
    networks:
      - backend

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    depends_on:
      - zookeeper
    volumes:
      - ./:/etc/kafka
    networks:
      - backend

  postgres:
    image: postgres:13.1
    container_name: postgresql-manager
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "postgres", "-U", "root" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=123
      - PGDATA=/tmp
    ports:
      - '5432:5432'
    volumes:
      - ./docker/postgres-volume/postgres-data-tablespace:/var/lib/postgresql-manager/data
      - ./docker/postgres-scripts:/var/lib/postgresql-manager/scripts
      - ./script/db:/docker-entrypoint-initdb.d/
    networks:
      - backend

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./env/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SERVER_DOMAIN=localhost
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_PROTOCOL=http

networks:
  backend:
    external: true
